if (is_osx) view.windowBlurbehind = #light;
//stdout.println("current platform:", OS);
//stdout.println("is_xfce: ", is_xfce);

// html min-width, min-height not working on mac, below works for all
view.windowMinSize = (scaleIt(560), scaleIt(300));

var app;
var tmp = handler.get_connect_status();
var connect_status = tmp[0];
var service_stopped = handler.get_option("stop-service") == "Y";
var software_update_url = "";
var key_confirmed = tmp[1];
var system_error = "";

var svg_menu = <svg #menu viewBox="0 0 512 512">
	<circle cx="256" cy="256" r="64"/>
	<circle cx="256" cy="448" r="64"/>
	<circle cx="256" cy="64" r="64"/>
</svg>;
var svg_refresh_password = <svg #refresh-password xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><path d="M2.5 2v6h6M2.66 15.57a10 10 0 1 0 .57-8.38"/></svg>;

var my_id = "";
function get_id() {
  my_id = handler.get_id();
  return my_id;
}

class ConnectStatus: Reactor.Component {
    function render() {
        return
            <div .connect-status>
                <span class={"connect-status-icon connect-status" + (service_stopped ? 0 : connect_status)} />
                {this.getConnectStatusStr()}
                {service_stopped ? <span .link #start-service>{translate('Start Service')}</span> : ""}
            </div>;
    }

    function getConnectStatusStr() {
        if (service_stopped) {
            return translate("Service is not running");
        } else if (connect_status == -1) {
            return translate('not_ready_status');
        } else if (connect_status == 0) {
            return translate('connecting_status');
        }
        return translate("Ready");
    }

    event click $(#start-service) () {
        handler.set_option("stop-service", "");
    }
}

function createNewConnect(id, type) {
    id = id.replace(/\s/g, "");
    app.remote_id.value = formatId(id);
    if (!id) return;
    if (id == my_id) {
        msgbox("custom-error", "Error", "You cannot connect to your own computer");
        return;
    }
    handler.set_remote_id(id);
    handler.new_remote(id, type);
}

class ShareRdp: Reactor.Component {
    function render() {
        var rdp_shared_string = translate("Enable RDP session sharing");
        var cls = handler.is_share_rdp()  ? "selected" : "line-through";
        return <li class={cls}><span>{svg_checkmark}</span>{rdp_shared_string}</li>;
    }

    function onClick() {
        handler.set_share_rdp(!handler.is_share_rdp());
        this.update();
    }
}

var direct_server;
class DirectServer: Reactor.Component {
    function this() {
        direct_server = this;
    }

    function render() {
        var text = translate("Enable Direct IP Access");
        var enabled = handler.get_option("direct-server") == "Y";
        var cls = enabled ? "selected" : "line-through";
        return <li class={cls}><span>{svg_checkmark}</span>{text}{enabled && <EditDirectAccessPort />}</li>;
    }

    function onClick() {
        if (is_edit_rdp_port) {
            is_edit_rdp_port = false;
            return;
        }
        handler.set_option("direct-server", handler.get_option("direct-server") == "Y" ? "" : "Y");
        this.update();
    }
}

var myIdMenu;
var audioInputMenu;
var languageMenu;
class AudioInputs: Reactor.Component {
    function this() {
        audioInputMenu = this;
    }

    function render() {
        if (!this.show) return <li />;
        var inputs = handler.get_sound_inputs();
        if (is_win) inputs = ["System Sound"].concat(inputs);
        if (!inputs.length) return <li style="display:hidden" />;
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li>{translate('Audio Input')}
            <menu #audio-input key={inputs.length}>
                <li #enable-audio><span>{svg_checkmark}</span>{translate("Mute")}</li>
                <div .separator />
                {inputs.map(function(name) {
                return <li id={name}><span>{svg_checkmark}</span>{translate(name)}</li>;
                })}
            </menu>
        </li>;
    }

    function get_default() {
        if (is_win) return "System Sound";
        return "";
    }

    function get_value() {
        return handler.get_option("audio-input") || this.get_default();
    }

    function toggleMenuState() {
        var el = this.$(li#enable-audio);
        var enabled = handler.get_option(el.id) != "N";
        el.attributes.toggleClass("selected", !enabled);
        var v = this.get_value();
        for (var el in this.$$(menu#audio-input>li)) {
            if (el.id == 'enable-audio') continue;
            var selected = el.id == v;
            el.attributes.toggleClass("selected", selected);
        }
    }

    event click $(menu#audio-input>li) (_, me) {
        var v = me.id;
        if (v == 'enable-audio') {
            handler.set_option(v, handler.get_option(v) != 'N' ? 'N' : '');
        } else {
          if (v == this.get_value()) return;
          if (v == this.get_default()) v = "";
          handler.set_option("audio-input", v);
        }
        this.toggleMenuState();
    }
};

class LanguagePicker: Reactor.Component
{
    function this() {
        languageMenu = this;
    }

    function render() {
        if (!this.show) return <li />;
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li>{translate('Language')}
            <menu #language-picker>
                <li id="en"><span>{svg_checkmark}</span>English</li>
				<li id="fr"><span>{svg_checkmark}</span>Français</li>
				<li id="de"><span>{svg_checkmark}</span>Deutsch</li>
                <li id="es"><span>{svg_checkmark}</span>Español</li>
                <li id="it"><span>{svg_checkmark}</span>Italiano</li>
                <li id="ptbr"><span>{svg_checkmark}</span>Português (Brasil)</li>
				<li id="eo"><span>{svg_checkmark}</span>Esperanto</li>
                <li id="cs"><span>{svg_checkmark}</span>Czech</li>
				<li id="hu"><span>{svg_checkmark}</span>Magyar</li>
				<li id="da"><span>{svg_checkmark}</span>Dansk</li>
				<li id="pl"><span>{svg_checkmark}</span>Polski</li>
				<li id="sk"><span>{svg_checkmark}</span>Slovenski</li>
                <li id="tr"><span>{svg_checkmark}</span>Türkçe</li>
                <li id="ru"><span>{svg_checkmark}</span>Русский</li>
				<li id="id"><span>{svg_checkmark}</span>Bahasa Indonesia</li>
                <li id="ko"><span>{svg_checkmark}</span>한국어</li>
                <li id="ja"><span>{svg_checkmark}</span>日本語</li>
                <li id="cn"><span>{svg_checkmark}</span>中文 (简体)</li>
                <li id="tw"><span>{svg_checkmark}</span>中文 (繁体)</li>
				<li id="vn"><span>{svg_checkmark}</span>Tiếng Việt</li>
				<li id="th"><span>{svg_checkmark}</span>ไทย</li>
            </menu>
        </li>;
    }

    function get_default() {
        return "en";
    }

    function get_value() {
        return handler.get_local_option("lang") || this.get_default();
    }

    function toggleMenuState() {
        var v = this.get_value();
        for (var el in this.$$(menu#language-picker>li)) {
            var selected = el.id == v;
            el.attributes.toggleClass("selected", selected);
        }
    }

    event click $(menu#language-picker>li) (_, me) {
        var v = me.id;
        if (v == this.get_value()) return;
        handler.set_local_option("lang", v);
        app.update();
        this.toggleMenuState();
    }
}

/*
var enhancementsMenu;
class Enhancements: Reactor.Component {
    function this() {
        enhancementsMenu = this;
    }

    function render() {
        var has_hwcodec = handler.has_hwcodec();
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li>{translate('Enhancements')}
            <menu #enhancements-menu>
                {has_hwcodec ? <li #enable-hwcodec><span>{svg_checkmark}</span>{translate("Hardware Codec")} (beta)</li> : ""}
                <li #enable-abr><span>{svg_checkmark}</span>{translate("Adaptive Bitrate")} (beta)</li>
            </menu>
        </li>;
    }

    function toggleMenuState() {
        for (var el in $$(menu#enhancements-menu>li)) {
            if (el.id && el.id.indexOf("enable-") == 0) {
                var enabled = handler.get_option(el.id) != "N";
                el.attributes.toggleClass("selected", enabled);
            }
        }

    }

    event click $(menu#enhancements-menu>li) (_, me) {
        var v = me.id;
        if (v.indexOf("enable-") == 0) {
            handler.set_option(v, handler.get_option(v) != 'N' ? 'N' : '');
        }
        this.toggleMenuState();
    }
}

function getUserName() {
    try {
        return JSON.parse(handler.get_local_option("user_info")).name;
    } catch(e) {}
    return '';
}*/

function updateTheme() {
    var root_element = self;
    if (handler.get_option("allow-darktheme") == "Y") {
        // enable dark theme
        root_element.attributes.toggleClass("darktheme", true);
    } else {
        // disable dark theme
        root_element.attributes.toggleClass("darktheme", false);
    }
}

class MyIdMenu: Reactor.Component {
    function this() {
        myIdMenu = this;
    }

    function render() {
        return <div #myid>
            {this.renderPop()}
            {translate("ID")}{svg_menu}
        </div>;
    }

    function renderPop() {
        return <popup>
            <menu.context #config-options>
                <li #enable-keyboard><span>{svg_checkmark}</span>{translate('Enable Keyboard/Mouse')}</li>
                <li #enable-clipboard><span>{svg_checkmark}</span>{translate('Enable Clipboard')}</li>
                <li #enable-file-transfer><span>{svg_checkmark}</span>{translate('Enable File Transfer')}</li>
                <li #enable-remote-restart><span>{svg_checkmark}</span>{translate('Enable Remote Restart')}</li>
                <li #enable-tunnel><span>{svg_checkmark}</span>{translate('Enable TCP Tunneling')}</li>
                <AudioInputs />
                <div .separator />
                <li #custom-server style="display:none">{translate('ID/Relay Server')}</li>
                <li #whitelist title={translate('whitelist_tip')}>{translate('IP Whitelisting')}</li>
                <li #socks5-server>{translate('SOCKS5 Proxy')}</li>
                <div .separator />
				<li #enable-wol><span>{svg_checkmark}</span>{translate("Enable Wake On LAN")}</li>
				<li #-enable-2fa style="behavior: enable-2fa-button" class={!handler.is_2fa_enabled() ? "line-through" : "selected"}><span>{svg_checkmark}</span>{translate("Enable 2FA")}</li>
                <li #enable-2fa-auto-accept class={(handler.get_config_option("enable-2fa-auto-accept") == "N" ? "line-through" : "selected") + " " + (handler.is_2fa_enabled() ? "tfa-enabled" : "tfa-disabled")}><span>{svg_checkmark}</span>{translate('Enable 2FA Auto Accept')}</li>
                <li #stop-service class={service_stopped ? "line-through" : "selected"}><span>{svg_checkmark}</span>{translate("Enable Service")}</li>
                <DirectServer />
                <div .separator />
                <LanguagePicker />
                <li #about>{translate('About')} {" "} {handler.get_app_name()}</li>
            </menu>
        </popup>;
    }

    event click $(svg#menu) (_, me) {
        this.showSettingMenu();
    }

    function showSettingMenu() {
        audioInputMenu.update({ show: true });
		languageMenu.update({ show: true });
        this.toggleMenuState();
        if (direct_server) direct_server.update();
        var menu = this.$(menu#config-options);
        this.$(svg#menu).popup(menu);
    }

    function toggleMenuState() {
        for (var el in $$(menu#config-options>li)) {
            if (el.id && el.id.indexOf("enable-") == 0) {
                var enabled = handler.get_option(el.id) != "N";
                el.attributes.toggleClass("selected", enabled);
                el.attributes.toggleClass("line-through", !enabled);
            } else if (el.id && el.id === "stop-service") {
                el.attributes.toggleClass("selected", !service_stopped);
                el.attributes.toggleClass("line-through", service_stopped);
            }
        }
    }

    function showAbout() {
        var name = handler.get_app_name();
            msgbox("custom-nocancel-nook-hasclose", "About " + name, "<div style='line-height: 2em'> \
                <div>Version: " + handler.get_version() + " \
            </div>
			<div style='font-size: 13px; color: #000; text-decoration: none;'>
				<div .link .custom-event url='https://www.hoptodesk.com'>Website</div> \
				<div .link .custom-event url='https://www.hoptodesk.com/privacy'>Privacy Statement</div> \
			<br><br>
			<div .link .custom-event url='https://www.gnu.org/licenses/agpl-3.0.en.html'><span style='text-decoration: none'>This software is licensed under&nbsp;</span>AGPL 3.0</div> \
			<div .link .custom-event url='https://www.hoptodesk.com/source.zip'><span style='text-decoration: none'>Source code is available&nbsp;</span>here</div><br>
			</div><br>
			<div style='font-size: 9px; color: #888; text-decoration: none;' .link .custom-event url='http://sciter.com/'>This Application (or Component) uses Sciter Engine, copyright Terra Informatica Software, Inc.</div>
			<div style='font-size: 9px; color: #888; text-decoration: none;'>Copyright &copy; HopToDesk. Originally forked from RustDesk.</div>			\
			", function(el) {
                if (el && el.attributes) {
                    handler.open_url(el.attributes['url']);
                };
            }, 400);
    }

    event click $(menu#config-options>li) (_, me) {
        if (me.id && me.id.indexOf("enable-") == 0) {
            var new_value = handler.get_option(me.id) == "N" ? "" : "N";
            handler.set_option(me.id, new_value);
        }
        if (me.id == "-enable-2fa") {
            var enabled = !(me.is_2fa_enabled());
            if (enabled) {
                stdout.println("2FA enabled");
                var data = me.enable_2fa();

                //msgbox("custom nocancel", translate("2FA QR code"), "<div .form> \
                //<center>" + translate("Scan the QR code on another device:") + "</center><center><img src={data.img_base64} /></center> \
                //</div> \
				//");

                msgbox("custom nocancel", "2FA QR code", <div .form>
                <center>Scan the QR code on another device:<img src={data.img_base64} /></center>
                </div>);
            } else {
                stdout.println("2FA disabled");
                me.disable_2fa();
            }
            me.attributes.toggleClass("selected", enabled);
            me.attributes.toggleClass("line-through", !enabled);

            var aa = $(menu#config-options>li#enable-2fa-auto-accept);
            aa.attributes.toggleClass("tfa-disabled", !enabled);
            aa.attributes.toggleClass("tfa-enabled", enabled);
        }
        if (me.id == "whitelist") {
            var old_value = handler.get_option("whitelist").split(",").join("\n");
            msgbox("custom-whitelist", translate("IP Whitelisting"), "<div .form> \
            <div>" + translate("whitelist_sep") + "</div> \
            <textarea spellcheck=\"false\" name=\"text\" novalue=\"0.0.0.0\" style=\"overflow: scroll-indicator; width:*; height: 140px; font-size: 1.2em; padding: 0.5em; margin-bottom: 10px; \">" + old_value + "</textarea>\
            </div> \
            ", function(res=null) {
                if (!res) return;
                var value = (res.text || "").trim();
                if (value) {
                    var values = value.split(/[\s,;\n]+/g);
                    for (var ip in values) {
                        if (!ip.match(/^\d+\.\d+\.\d+\.\d+$/)) {
                            return translate("Invalid IP") + ": " + ip;
                        }
                    }
                    value = values.join("\n");
                }
                if (value == old_value) return;
                stdout.println("whitelist updated");
                handler.set_option("whitelist", value.replace("\n", ","));
            }, 300);
        } else if (me.id == "custom-server") {
            var configOptions = handler.get_options();
            var old_relay = configOptions["relay-server"] || "";
            var old_id = configOptions["custom-rendezvous-server"] || "";
            msgbox("custom-server", "ID/Relay Server", "<div .form .set-password> \
            <div><span>" + translate("ID Server") + ": </span><input|text .outline-focus name='id' value='" + old_id + "' /></div> \
            <div><span>" + translate("Relay Server") + ": </span><input|text name='relay' value='" + old_relay + "' /></div> \
            </div> \
            ", function(res=null) {
                if (!res) return;
                var id = (res.id || "").trim();
                var relay = (res.relay || "").trim();
                if (id == old_id && relay == old_relay) return;
                if (id) {
                    var err = handler.test_if_valid_server(id);
                    if (err) return translate("ID Server") + ": " + err;
                }
                if (relay) {
                    var err = handler.test_if_valid_server(relay);
                    if (err) return translate("Relay Server") + ": " + err;
                }
                configOptions["custom-rendezvous-server"] = id;
                configOptions["relay-server"] = relay;
                handler.set_options(configOptions);
            }, 240);
        } else if (me.id == "socks5-server") {
            var socks5 = handler.get_socks() || {};
            var old_proxy = socks5[0] || "";
            var old_username = socks5[1] || "";
            var old_password = socks5[2] || "";
            msgbox("custom-server", "SOCKS5 Proxy", <div .form .set-password>
            <div><span>{translate("Hostname")}:</span><input|text name='proxy' value={old_proxy} /></div>
            <div><span>{translate("Username")}:</span><input|text name='username' value={old_username} /></div>
            <div><span>{translate("Password")}:</span><PasswordComponent value={old_password} /></div>
            </div>
            , function(res=null) {
                if (!res) return;
                var proxy = (res.proxy || "").trim();
                var username = (res.username || "").trim();
                var password = (res.password || "").trim();
                if (proxy == old_proxy && username == old_username && password == old_password) return;
                if (proxy) {
                    var err = handler.test_if_valid_server(proxy);
                    if (err) return translate("Server") + ": " + err;
                }
                handler.set_socks(proxy, username, password);
            }, 240);
        } else if (me.id == "stop-service") {
            handler.set_option("stop-service", service_stopped ? "" : "Y");
        } else if (me.id == "allow-darktheme") {
            updateTheme();
        } else if (me.id == "about") {
            this.showAbout()
        } else if (me.id == "enable-wol") {
            var enable_wol = handler.get_option("enable-wol") ? "N" : "Y"
            handler.set_option("enable-wol", enable_wol);
        }
    }
}

var is_edit_direct_access_port;
class EditDirectAccessPort: Reactor.Component {
    function render() {
        return <span style="margin-left: 12px; padding: 0 6px; display: inline-block;" .link>{svg_edit}</span>;
    }

    function onMouse(evt) {
        if (evt.type == Event.MOUSE_DOWN) {
            is_edit_direct_access_port = true;
            editDirectAccessPort();
        }
    }
}

function editDirectAccessPort() {
    var p0 = handler.get_option('direct-access-port');
    var port = p0 ? <input|text name='port' value={p0} /> :
                    <input|text name='port' novalue={21118} />;
    msgbox("custom-direct-access-port", translate('Direct IP Access Settings'), <div .form .set-password>
            <div><span style="width: 60px; ">{translate('Port')}:</span>{port}</div>
        </div>, function(res=null) {
        if (!res) return;
        var p = (res.port || '').trim();
        if (p) {
            p = p.toInteger();
            if (!(p > 0)) {
                return translate("Invalid port");
            }
            p = p + '';
        }
        if (p != p0) handler.set_option('direct-access-port', p);
      });
}

class App: Reactor.Component
{
    function this() {
        app = this;
    }

    function render() {
        var is_can_screen_recording = handler.is_can_screen_recording(false);
        return
            <div .app>
                    <popup><menu.context #edit-password-context>
                        <li #refresh-password>{translate('Refresh random password')}</li>
                        <li #set-password>{translate('Set your own password')}</li>
                    </menu></popup>
                    <div .left-pane>
                    <div>
                        <div .title>{translate('Your Desktop')}</div>
                        <div .lighter-text>{translate('desk_tip')}</div>
                        <div .your-desktop>
                            <MyIdMenu />
                            {key_confirmed ? <input type="text" readonly value={formatId(get_id())}/> : translate("Generating ...")}
                        </div>
                        <PasswordArea />
                    </div>

                    {!is_win || handler.is_installed() ? "": <InstallMe />}
                    {is_win && handler.is_installed() ? <EmptyMe />: ""}
                    {is_can_screen_recording ? "": <CanScreenRecording />}
                    {is_can_screen_recording && !handler.is_process_trusted(false) ? <TrustMe /> : ""}
                    {!service_stopped && is_can_screen_recording && handler.is_process_trusted(false) && handler.is_installed() && !handler.is_installed_daemon(false) ? <InstallDaemon /> : ""}
                    {is_osx && !service_stopped && is_can_screen_recording && handler.is_process_trusted(false) && !handler.is_installed() && handler.is_installed_daemon(false) ? <EmptyMe />: ""}
                    {system_error ? <SystemError /> : ""}
                    {!system_error && handler.is_login_wayland() && !handler.current_is_wayland() ? <FixWayland /> : ""}
                    {!system_error && handler.current_is_wayland() ? <ModifyDefaultLogin /> : ""}
                    {is_linux && !system_error && !handler.is_login_wayland() && !handler.current_is_wayland() ? <EmptyMe />: ""}
                </div>
                <div .right-pane>
                    <div .right-content>
                        <div .title>{translate('Control Remote Desktop')}</div>
						<div .card-connect>

                            <ID @{this.remote_id} />
                            <div .right-buttons>
                                <button .button .outline #file-transfer>{translate('Transfer File')}</button>
                                <button .button #connect>{translate('Connect')}</button>
                            </div>
                        </div>
                        <MultipleSessions @{this.multipleSessions} />
                    </div>
                    <ConnectStatus @{this.connect_status} />
                </div>
                <div #msgbox />
            </div>;
    }

    event click $(button#connect) {
        this.newRemote("connect");
    }

    event click $(button#file-transfer) {
        this.newRemote("file-transfer");
    }

    function newRemote(type) {
        createNewConnect(this.remote_id.value, type);
    }
}

class InstallMe: Reactor.Component {
    function render() {
        return <div .install-me style="margin-top: -5px;">
            <span />
            <div>{translate('install_tip')}</div>
            <div><center><button #install-me .button>{translate('Install')}</button></center></div>
        </div>;
    }

    event click $(#install-me) {
        handler.goto_install();
    }
}

class EmptyMe: Reactor.Component {
    function render() {
        return <div .install-me style="background-color: #ECF4FF; position: absolute; margin-top: -5px; font-family: 'opensans-semb';height:10%">
            <span />
            <div style="font-size: 30px; color: #2D81D4; -webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; font-weight: 800;">HopToDesk</div>
            <div></div>
        </div>;
    }

    event click $(#install-me) {
        handler.goto_install();
    }
}

function download(from, to, args..) {
    var rqp = { type:#get, url: from, toFile: to };
    var fn = 0;
    var on = 0;
    for( var p in args ) {
        if( p instanceof Function ) {
            switch(++fn) {
                case 1: rqp.success = p; break;
                case 2: rqp.error = p; break;
                case 3: rqp.progress = p; break;
            }
        } else if( p instanceof Object ) {
            switch(++on) {
                case 1: rqp.params = p; break;
                case 2: rqp.headers = p; break;
            }
        }
    }
    view.request(rqp);
}

// current running version is higher than installed
class UpgradeMe: Reactor.Component {
    function render() {
        var update_or_download = is_osx ? "download" : "update";
        return <div .install-me>
            <div>{translate('Status')}</div>
            <div>{translate('A new update is available.')}</div>
			<center><button #install-me .button style="height: 30px;">{translate('Upgrade Now')}</button></center>
        </div>;
    }

    event click $(#install-me) {
        handler.update_me("");
    }
}

class UpdateMe: Reactor.Component {
    function render() {
        var update_or_download = "download"; // !is_win ? "download" : "update";
        return <div .install-me>
            <div>{translate('Status')}</div>
            <div>There is a newer version of {handler.get_app_name()} ({handler.get_new_version()}) available.</div>
            <div #install-me.link>{translate('Click to ' + update_or_download)}</div>
            <div #download-percent style="display:hidden; padding-top: 1em;" />
        </div>;
    }

    event click $(#install-me) {
        handler.open_url("https://www.hoptodesk.com");
        return;
        if (!is_win) {
            handler.open_url("https://www.hoptodesk.com");
            return;
        }
        var url = software_update_url + '.' + handler.get_software_ext();
        var path = handler.get_software_store_path();
        var onsuccess = function(md5) {
            $(#download-percent).content(translate("Installing ..."));
            handler.update_me(path);
        };
        var onerror = function(err) {
            msgbox("custom-error", "Download Error", "Failed to download");
        };
        var onprogress = function(loaded, total) {
            if (!total) total = 5 * 1024 * 1024;
            var el = $(#download-percent);
            el.style.set{display: "block"};
            el.content("Downloading %" + (loaded * 100 / total));
        };
        stdout.println("Downloading " + url + " to " + path);
        http.download(
            url,
            self.url(path),
            onsuccess, onerror, onprogress);
    }
}

class SystemError: Reactor.Component {
    function render() {
        return <div .install-me>
            <div>{system_error}</div>
        </div>;
    }
}

class TrustMe: Reactor.Component {
    function render() {
        return <div .trust-me #trust-me-box style="margin-top: -5px;">
            <div style="margin-top: 10px;">{translate('Permissions')}</div>
            <div style="text-align: center">{translate('config_acc')}</div>
            <div #trust-me .link>{translate('Configure')}</div>
        </div>;
    }

    event click $(#trust-me) {
        handler.is_process_trusted(true);
        watch_trust();
    }
}

class CanScreenRecording: Reactor.Component {
    function render() {
        return <div .trust-me #screen-recording-box style="margin-top: -5px;">
            <div style="margin-top: 10px;">{translate('Permissions')}</div>
            <div style="text-align: center">{translate('config_screen')}</div>
            <div #screen-recording .link>{translate('Configure')}</div>
        </div>;
    }

    event click $(#screen-recording) {
        handler.is_can_screen_recording(true);
        watch_screen_recording();
    }

    event click $(#help-me) {
        handler.open_url(translate("doc_mac_permission"));
    }
}

class InstallDaemon: Reactor.Component {
    function render() {
        return <div .install-me>
            <span />
            <div>{translate('install_daemon_tip')}</div>
            <div #install-me.link>{translate('Install')}</div>
        </div>;
    }

    event click $(#install-me) {
        handler.is_installed_daemon(true);
    }
}

class FixWayland: Reactor.Component {
    function render() {
        return <div .trust-me style="margin-top: -5px;">
            <div style="margin-top: 10px; padding-top: 5px;">{translate('Change Display')}</div>
            <div>{translate('Login screen using Wayland is not supported.')}</div>
            <div #fix-wayland .link>{translate('Fix it')}</div>
            <div style="text-align: center">({translate('Reboot required')})</div>
        </div>;
    }

    event click $(#fix-wayland) {
        handler.fix_login_wayland();
        app.update();
    }
}

class ModifyDefaultLogin: Reactor.Component {
    function render() {
        return <div .trust-me>
            <div style="margin-top: 10px; padding-top: 5px;">{translate('Change Display')}</div>
            <div>{translate('Current Wayland display server is not supported.')}</div>
            <div #modify-default-login .link>{translate('Fix it')}</div>
            <div style="text-align: center">({translate('Reboot required')})</div>
        </div>;
    }

    event click $(#modify-default-login) {
        if (var r = handler.modify_default_login()) {
            // without handler, will fail, fucking stupid sciter
            handler.msgbox("custom-error", "Error", r);
        }
        app.update();
    }

    event click $(#help-me) {
        handler.open_url(translate("doc_fix_wayland"));
    }
}

function watch_trust() {
    // not use TrustMe::update, because it is buggy
    var trusted = handler.is_process_trusted(false);
    var el = $(div#trust-me-box);
    if (el) {
        el.style.set {
            display: trusted ? "none" : "block",
        };
    }
    if (trusted) {
        app.update();
        return;
    }
    self.timer(1s, watch_trust);
}

function watch_screen_recording() {
    var trusted = handler.is_can_screen_recording(false);
    var el = $(div#screen-recording-box);
    if (el) {
        el.style.set {
            display: trusted ? "none" : "block",
        };
    }
    if (trusted) {
        app.update();
        return;
    }
    self.timer(1s, watch_screen_recording);
}

class PasswordEyeArea : Reactor.Component {
    render() {
        var method = handler.get_option('verification-method');
        var value = method != 'use-permanent-password' ? password_cache[0] : "-";
        return
            <div .eye-area style="width: *">
                <input|text @{this.input} readonly value={value} />
                {svg_refresh_password}
            </div>;
    }

    event click $(svg#refresh-password) (_, me) {
        handler.update_temporary_password();
        this.update();
    }
}

var temporaryPasswordLengthMenu;
class TemporaryPasswordLengthMenu: Reactor.Component {
    function this() {
        temporaryPasswordLengthMenu = this;
    }

    function render() {
        if (!this.show) return <li />;
        var me = this;
        var method = handler.get_option('verification-method');
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li disabled={ method == 'use-permanent-password' ? "true" : "false" }>{translate("Set temporary password length")}
            <menu #temporary-password-length>
                <li #temporary-password-length-6><span>{svg_checkmark}</span>6</li>
                <li #temporary-password-length-8><span>{svg_checkmark}</span>8</li>
                <li #temporary-password-length-10><span>{svg_checkmark}</span>10</li>
            </menu>
        </li>;
    }

    function toggleMenuState() {
        var length = handler.get_option("temporary-password-length");
        var index = ['6', '8', '10'].indexOf(length);
        if (index < 0) index = 0;
        for (var (i, el) in this.$$(menu#temporary-password-length>li)) {
            el.attributes.toggleClass("selected", i == index);
        }
    }

    event click $(menu#temporary-password-length>li) (_, me) {
        var length = me.id.substring('temporary-password-length-'.length);
        var old_length = handler.get_option('temporary-password-length');
        if (length != old_length) {
            handler.set_option('temporary-password-length', length);
            handler.update_temporary_password();
            this.toggleMenuState();
            passwordArea.update();
        }
    }
}

var passwordArea;
class PasswordArea: Reactor.Component {
    function this() {
        passwordArea = this;
    }

    function render() {
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return
        <div .your-desktop>
            <div>{translate('Password')}</div>
            <div .password style="flow:horizontal">
                {this.renderPop()}
                <PasswordEyeArea />
                {svg_edit}
            </div>
        </div>;
    }

    function renderPop() {
        var method = handler.get_option('verification-method');
        return <popup><menu.context #edit-password-context>
            <li #use-temporary-password><span>{svg_checkmark}</span>{translate('Use temporary password')}</li>
            <li #use-permanent-password><span>{svg_checkmark}</span>{translate('Use permanent password')}</li>
            <li #use-both-passwords><span>{svg_checkmark}</span>{translate('Use both passwords')}</li>
            <div .separator />
            <li #set-password  disabled={ method == 'use-temporary-password' ? "true" : "false" }>{translate('Set permanent password')}</li>
            <TemporaryPasswordLengthMenu />
        </menu></popup>;
    }

    function toggleMenuState() {
        var id = handler.get_option('verification-method');
        if (id != 'use-temporary-password' && id != 'use-permanent-password')
            id = 'use-both-passwords';
        for (var el in [this.$(li#use-temporary-password), this.$(li#use-permanent-password), this.$(li#use-both-passwords)]) {
            el.attributes.toggleClass("selected", el.id == id);
        }
    }

    event click $(svg#edit) (_, me) {
        temporaryPasswordLengthMenu.update({show: true });
        var menu = $(menu#edit-password-context);
        me.popup(menu);
    }

    event click $(li#set-password) {
        var me = this;
        var password = handler.permanent_password();
        var value_field = password.length == 0 ? "" : "value=" + password;
        msgbox("custom-password", translate("Set Password"), "<div .form .set-password> \
            <div><span>" + translate('Password') + ":</span><input|password(password) .outline-focus " + value_field + " /></div> \
            <div><span>" + translate('Confirmation') + ":</span><input|password(confirmation) " + value_field + " /></div> \
        </div> \
        ", function(res=null) {
            if (!res) return;
            var p0 = (res.password || "").trim();
            var p1 = (res.confirmation || "").trim();
            if (p0.length < 6) {
                return translate("Too short, at least 6 characters.");
            }
            if (p0 != p1) {
                return translate("The confirmation is not identical.");
            }
            handler.set_permanent_password(p0);
            me.update();
        });
    }

    event click $(menu#edit-password-context>li) (_, me) {
        if (me.id.indexOf('use-') == 0) {
            handler.set_option('verification-method', me.id);
            this.toggleMenuState();
            passwordArea.update();
        }
    }
}

var password_cache = ["","",""];
function updatePasswordArea() {
    self.timer(1s, function() {
        var temporary_password = handler.temporary_password();
        var verification_method = handler.get_option('verification-method');
        var temporary_password_length = handler.get_option('temporary-password-length');
        var update = false;
        if (password_cache[0] != temporary_password) {
            password_cache[0] = temporary_password;
            update = true;
        }
        if (password_cache[1] != verification_method) {
            password_cache[1] = verification_method;
            update = true;
        }
        if (password_cache[2] != temporary_password_length) {
            password_cache[2] = temporary_password_length;
            update = true;
        }
        if (update) passwordArea.update();
        updatePasswordArea();
    });
}
updatePasswordArea();
class ID: Reactor.Component {
    function render() {
        return <input type="text" #remote_id .outline-focus novalue={translate("Enter Remote ID")} maxlength="21"
        value={formatId(handler.get_remote_id())} />;
    }

    // https://github.com/c-smile/sciter-sdk/blob/master/doc/content/sciter/Event.htm
    event change {
        var fid = formatId(this.value);
        var d = this.value.length - (this.old_value || "").length;
        this.old_value = this.value;
        var start = this.xcall(#selectionStart) || 0;
        var end = this.xcall(#selectionEnd);
        if (fid == this.value || d <= 0 || start != end) {
            return;
        }
        // fix Caret position
        this.value = fid;
        var text_after_caret = this.old_value.substr(start);
        var n = fid.length - formatId(text_after_caret).length;
        this.xcall(#setSelection, n, n);
    }
}

var reg = /^\d+$/;
function formatId(id) {
    id = id.replace(/\s/g, "");
    if (reg.test(id) && id.length > 3) {
        var n = id.length;
        var a = n % 3 || 3;
        var new_id = id.substr(0, a);
        for (var i = a; i < n; i += 3) {
            new_id += " " + id.substr(i, 3);
        }
        return new_id;
    }
    return id;
}

event keydown (evt) {
    if (view.focus && view.focus.id != 'remote_id') {
        return;
    }
    if (!evt.shortcutKey) {
        if (isEnterKey(evt)) {
            var el = $(button#connect);
            view.focus = el;
            el.sendEvent("click");
            // simulate button click effect, windows does not have this issue
            el.attributes.toggleClass("active", true);
            self.timer(0.3s, function() {
                el.attributes.toggleClass("active", false);
            });
        }
    }
}

$(body).content(<div style="size:*"><App /><div #msgbox /></div>);

function self.closing() {
    var (x, y, w, h) = view.box(#rectw, #border, #screen);
    handler.closing(x, y, w, h);
    return true;
}

function self.ready() {
    var r = handler.get_size();
    if (isReasonableSize(r) && r[2] > 0) {
        var (sx, sy, sw, sh) = view.screenBox(#workarea, #rectw);
        if (r[2] >= sw && r[3] >= sh) {
            self.timer(1ms, function() { view.windowState = View.WINDOW_MAXIMIZED; });
        } else {
            view.move(r[0], r[1], r[2], r[3]);
        }
    } else {
        centerize(scaleIt(800), scaleIt(600));
    }
    if (!handler.get_remote_id()) {
        view.focus = $(#remote_id);
    }
	refreshCurrentUser();
    updateTheme();
}

function showAbout() {
    myIdMenu.showAbout();
}

function showSettings() {
	if ($(#overlay).style#display == 'block') return;
    myIdMenu.showSettingMenu();
}

function checkConnectStatus() {
    self.timer(1s, function() {
        var tmp = !!handler.get_option("stop-service");
        if (tmp != service_stopped) {
            service_stopped = tmp;
            app.update();
        }
        tmp = handler.get_connect_status();
        if (tmp[0] != connect_status) {
            connect_status = tmp[0];
            app.connect_status.update();
        }
        if (tmp[1] != key_confirmed) {
            key_confirmed = tmp[1];
            app.update();
        }
        if (tmp[2] && tmp[2] != my_id) {
            stdout.println("id updated");
            app.update();
        }
        tmp = handler.get_error();
        if (system_error != tmp) {
            system_error = tmp;
            app.update();
        }
        tmp = handler.get_software_update_url();
        if (tmp != software_update_url) {
            software_update_url = tmp;
            app.update();
        }
        if (handler.recent_sessions_updated()) {
            stdout.println("recent sessions updated");
            updateAbPeer();
            app.update();
        }
		check_if_overlay();
        checkConnectStatus();
    });
}

var enter = false;
function self.onMouse(evt) {
	switch(evt.type) {
    case Event.MOUSE_ENTER:
		enter = true;
        check_if_overlay();
        break;
    case Event.MOUSE_LEAVE:
		//$(#overlay).style#display = 'none';
        enter = false;
        break;
    }
}

function check_if_overlay() {
    if (!handler.get_option('allow-remote-config-modification')) {
        var time0 = getTime();
        handler.check_mouse_time();
        self.timer(120ms, function() {
            if (!enter) return;
            var d = time0 - handler.get_mouse_time();
            if (d < 120) $(#overlay).style#display = 'block';
        });
    }
}

checkConnectStatus();

function login() {
    var name0 = getUserName();
    var pass0 = '';
    msgbox("custom-login", translate('Login'), <div .form .set-password>
            <div><span>{translate('Username')}:</span><input|text name="username" value={name0} .outline-focus /></div>
            <div><span>{translate('Password')}:</span><PasswordComponent value={pass0} /></div>
        </div>, function(res=null, show_progress) {
        if (!res) return;
        show_progress();
        var name = (res.username || '').trim();
        if (!name) {
            show_progress(false, translate("Username missed"));
            return " ";
        }
        var pass = (res.password || '').trim();
        if (!pass) {
            show_progress(false, translate("Password missed"));
            return " ";
        }
        abLoading = true;
        var url = handler.get_api_server();
        httpRequest(url + "/api/login", #post, {username: name, password: pass, id: my_id, uuid: handler.get_uuid()}, function(data) {
            if (data.error) {
                abLoading = false;
                var err = translate(data.error);
                show_progress(false, err);
                return;
            }
            handler.set_local_option("access_token", data.access_token);
            handler.set_local_option("user_info", JSON.stringify(data.user));
            show_progress(-1);
            myIdMenu.update();
            getAb();
        }, function(err, status) {
            abLoading = false;
            err = translate(err);
            if (url.indexOf('hoptodesk') < 0) err = url + ', ' + err;
            show_progress(false, err);
        });
        return " ";
      });
}

function reset_token() {
    handler.set_local_option("access_token", "");
    handler.set_local_option("user_info", "");
    handler.set_local_option("selected-tags", "");
    myIdMenu.update();
    resetAb();
    if (abComponent) {
        abComponent.update();
    }
}

function logout() {
    var url = handler.get_api_server();
    httpRequest(url + "/api/logout", #post, {id: my_id, uuid: handler.get_uuid()}, function(data) {
    }, function(err, status) {
        msgbox("custom-error", translate('Error'), err);
    }, getHttpHeaders());
    reset_token();
}

function refreshCurrentUser() {
    if (!handler.get_local_option("access_token")) return;
    abLoading = true;
    abError = "";
    app.update();
    httpRequest(handler.get_api_server() + "/api/currentUser", #post, {id: my_id, uuid: handler.get_uuid()}, function(data) {
        if (data.error) {
            handleAbError(data.error);
            return;
        }
        handler.set_local_option("user_info", JSON.stringify(data));
        myIdMenu.update();
        getAb();
    }, function(err, status) {
        if (status == 401 || status == 400) {
            reset_token();
        }
        handleAbError(err);
    }, getHttpHeaders());
}

function getHttpHeaders() {
    return "Authorization: Bearer " + handler.get_local_option("access_token");
}
